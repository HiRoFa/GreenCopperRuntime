searchState.loadedDescShard("swc_ecma_transforms", 0, "Alternative for https://babeljs.io/docs/en/assumptions\nhttps://babeljs.io/docs/en/assumptions#arraylikeisiterable\nhttps://babeljs.io/docs/en/assumptions#constantreexports\nhttps://babeljs.io/docs/en/assumptions#constantsuper\nhttps://babeljs.io/docs/en/assumptions#enumerablemodulemeta\nFixes ast nodes before printing so semantics are preserved.\nReturns the argument unchanged.\nSee hygiene_with_config for doc. Creates a <code>hygiene</code> pass …\nhttps://babeljs.io/docs/en/assumptions#ignorefunctionlength\n…\nCalls <code>U::from(self)</code>.\nhttps://babeljs.io/docs/en/assumptions#iterableisarray\n…\nhttps://babeljs.io/docs/en/assumptions#noclasscalls\nhttps://babeljs.io/docs/en/assumptions#nodocumentall\n…\nhttps://babeljs.io/docs/en/assumptions#nonewarrows\nhttps://babeljs.io/docs/en/assumptions#objectrestnosymbols\n…\nhttps://babeljs.io/docs/en/assumptions#puregetters\nSee Ident for know how does swc manages identifiers.\nhttps://babeljs.io/docs/en/assumptions#setclassmethods\n…\nhttps://babeljs.io/docs/en/assumptions#setpublicclassfields\nhttps://babeljs.io/docs/en/assumptions#setspreadproperties\n…\n…\n<code>transform-arrow-functions</code>\n<code>proposal-async-generator-functions</code>\n<code>transform-async-to-generator</code>\n<code>transform-block-scoped-functions</code>\n<code>transform-block-scoping</code>\n<code>bugfix/transform-async-arrows-in-class</code>\n<code>bugfix/transform-edge-default-parameters</code>\n…\n<code>bugfix/transform-tagged-template-caching</code>\n<code>bugfix/transform-edge-function-name</code>\n<code>bugfix/transform-safari-block-shadowing</code>\n<code>bugfix/transform-safari-for-shadowing</code>\n<code>bugfix/transform-v8-spread-parameters-in-optional-chaining</code>\n<code>proposal-class-properties</code>\n<code>proposal-class-static-block</code>\n<code>transform-classes</code>\n<code>transform-computed-properties</code>\n<code>transform-destructuring</code>\n<code>transform-dotall-regex</code>\n<code>transform-duplicate-keys</code>\n<code>transform-exponentiation-operator</code>\n<code>proposal-export-namespace-from</code>\n<code>transform-for-of</code>\n<code>transform-function-name</code>\n<code>proposal-json-strings</code>\n<code>transform-literals</code>\n<code>proposal-logical-assignment-operators</code>\n<code>transform-member-expression-literals</code>\n<code>transform-named-capturing-groups-regex</code>\n<code>transform-new-target</code>\n<code>proposal-nullish-coalescing-operator</code>\n<code>proposal-numeric-separator</code>\n<code>proposal-object-rest-spread</code>\n<code>transform-object-super</code>\n<code>proposal-optional-catch-binding</code>\n<code>proposal-optional-chaining</code>\n<code>transform-parameters</code>\n<code>proposal-private-methods</code>\n<code>proposal-private-property-in-object</code>\n<code>transform-property-literals</code>\n<code>transform-regenerator</code>\n<code>transform-reserved-words</code>\n<code>transform-shorthand-properties</code>\n<code>transform-spread</code>\n<code>transform-sticky-regex</code>\n<code>transform-template-literals</code>\n<code>transform-typeof-symbol</code>\n<code>transform-unicode-escapes</code>\n<code>proposal-unicode-property-regex</code>\n<code>transform-unicode-regex</code>\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nFixes ast nodes before printing so semantics are preserved.\nThis variable is used to manage helper scripts like …\nTracks used helper methods. (e.g. __extends)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nSee hygiene_with_config for doc. Creates a <code>hygiene</code> pass …\nThe pass actually modifies the identifiers in the way that …\nCalls <code>U::from(self)</code>.\nIf true, the <code>hygiene</code> pass will preserve class names.\nA visitor which visits node only if <code>enabled</code> is true.\nTrait for a pass which is designed to invoked multiple …\nShould run again?\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReset.\nThis is considered as a private type and it’s NOT A …\nInvoked after visiting all ModuleItems, possibly in …\nInvoked after visiting each statements.\nInvoked after visiting each statements.\nInvoked after visiting all Stmts, possibly in parallel.\nUsed to create visitor.\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nThis can be called in anytime.")