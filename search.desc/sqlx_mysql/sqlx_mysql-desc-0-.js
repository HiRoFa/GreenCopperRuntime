searchState.loadedDescShard("sqlx_mysql", 0, "<strong>MySQL</strong> database driver.\nEstablish an unencrypted connection.\nMySQL database driver.\nImplementation of <code>Arguments</code> for MySQL.\nOptions and flags which can be used to configure a MySQL …\nA connection to a MySQL database.\nAn error returned from the MySQL database.\nAn alias for <code>Executor&lt;&#39;_, Database = MySql&gt;</code>.\nAn alias for <code>Pool</code>, specialized for MySQL.\nAn alias for <code>PoolOptions</code>, specialized for MySQL.\nImplementation of <code>Row</code> for MySQL.\nOptions for controlling the desired security state of the …\nImplementation of <code>TransactionManager</code> for MySQL.\nType information for a MySql type.\nImplementation of <code>Value</code> for MySQL.\nImplementation of <code>ValueRef</code> for MySQL.\nEstablish an encrypted connection if the server supports …\nEstablish an encrypted connection if the server supports …\nLike <code>Required</code>, but additionally verify the server …\nLike <code>VerifyCa</code>, but additionally perform host name identity …\nSets the character set for the connection.\nThe SQLSTATE code for this error.\nSets the collation for the connection.\nSets the database name.\nEnables mysql_clear_password plugin support.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the server charset.\nGet the server collation.\nGet the current database name.\nGet the current host.\nGet the server’s port.\nGet the socket path.\nGet the SSL mode.\nGet the server’s port.\nSets the name of the host to connect to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe human-readable error message.\nCreates a new, default set of options ready for …\nFlag that enables or disables the <code>NO_ENGINE_SUBSTITUTION</code> …\nThe number for this error.\nSets the password to connect with.\nSets the flag that enables or disables the <code>PIPES_AS_CONCAT</code> …\nSets the port to connect to at the server host.\nIf enabled, <code>SET NAMES &#39;{charset}&#39; COLLATE &#39;{collation}&#39;</code> is …\nPass a path to a Unix socket. This changes the connection …\nSets the name of a file containing a list of trusted SSL …\nSets PEM encoded list of trusted SSL Certificate …\nSets the name of a file containing SSL client certificate.\nSets the SSL client certificate as a PEM-encoded byte …\nSets the name of a file containing SSL client key.\nSets the SSL client key as a PEM-encoded byte slice.\nSets whether or with what priority a secure SSL TCP/IP …\nSets the capacity of the connection’s statement cache in …\nIf <code>Some</code>, sets the <code>time_zone</code> option to the given string …\nConversions between Rust and <strong>MySQL/MariaDB</strong> types.\nSets the username to connect as.\nA field of <code>MySqlTime</code> exceeded its max range.\nThe <code>MySqlTime</code> value corresponding to <code>TIME &#39;838:59:59.0&#39;</code> …\nThe <code>MySqlTime</code> value corresponding to <code>TIME &#39;-838:59:59.0&#39;</code> …\nContainer for a MySQL <code>TIME</code> value, which may be an interval …\nErrors returned by <code>MySqlTime::new()</code>.\nThe sign for a <code>MySqlTime</code> type.\nThe interval is negative (invalid for time-of-day values).\nMySQL coerces <code>-00:00:00</code> to <code>00:00:00</code> but this API considers …\nThe interval is positive, or represents a time-of-day.\nError returned for time magnitudes (positive or negative) …\nThe <code>MySqlTime</code> value corresponding to <code>TIME &#39;0:00:00.0&#39;</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the total number of hours in this interval, from 0 to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> is negative, <code>false</code> if positive or …\nReturns <code>true</code> if negative, <code>false</code> if positive.\nReturns <code>true</code> if <code>self</code> is positive or zero, <code>false</code> if …\nReturns <code>true</code> if positive, <code>false</code> if negative.\nReturns <code>true</code> if this interval is a valid time-of-day.\nReturns <code>true</code> if <code>self</code> is zero (equal to <code>Self::ZERO</code>).\nGet the number of seconds in this interval, from 0 to …\nGet the number of minutes in this interval, from 0 to 59.\nConstruct a <code>MySqlTime</code> that is valid for use as a <code>TIME</code> …\nGet the number of seconds in this interval, from 0 to 59.\nReturn the sign (positive or negative) for this TIME value.\nConvert this TIME value to a <code>std::time::Duration</code>.\nUpdate the <code>sign</code> of this value.\nThe number of microseconds over the maximum.\nThe sign of the magnitude.\nThe truncated value, either <code>MySqlTime::MIN</code> if negative or …")