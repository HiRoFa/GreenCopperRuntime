searchState.loadedDescShard("pkcs1", 0, "RustCrypto: PKCS#1 (RSA)\n<code>AlgorithmIdentifier</code> for RSA.\n<code>rsaEncryption</code> Object Identifier (OID)\nASN.1 DER-related errors.\nthe only supported value (0xbc, default)\nCarriage return: <code>\\r</code> (Pre-OS X Macintosh)\nCarriage return + line feed: <code>\\r\\n</code> (Windows)\nCryptographic errors.\nParse an <code>RsaPrivateKey</code> from a PKCS#1-encoded document.\nParse a <code>RsaPublicKey</code> from a PKCS#1-encoded document.\nSerialize a <code>RsaPrivateKey</code> to a PKCS#1 encoded document.\nSerialize a <code>RsaPublicKey</code> to a PKCS#1-encoded document.\nContains the error value\nError type\nLine feed: <code>\\n</code> (Unix OSes)\nLine endings: variants of newline characters that can be …\nMaximum size of a BER/DER-encoded OID in bytes.\nDenotes a <code>multi</code> (i.e. multi-prime) key\nObject identifier (OID).\nContains the success value\nPKCS#1 OtherPrimeInfo as defined in RFC 8017 Appendix 1.2.\nAdditional RSA prime info in a multi-prime RSA key.\nPKCS#8 errors.\nResult type\nPKCS#1 RSAES-OAEP parameters as defined in RFC 8017 …\nPKCS#1 RSA Private Keys as defined in RFC 8017 Appendix 1.2…\nPKCS#1 RSASSA-PSS parameters as defined in RFC 8017 …\nPKCS#1 RSA Public Keys as defined in RFC 8017 Appendix 1.1.\nDefault RSA PSS Salt length in RsaPssParams\n<code>TrailerField</code> as defined in RFC 8017 Appendix 2.3.\nDenotes a <code>two-prime</code> key\nUnsigned arbitrary precision ASN.1 <code>INTEGER</code> reference type.\nVersion identifier for PKCS#1 documents as defined in RFC …\nVersion errors\nReturn the arc with the given index, if it exists.\nIterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…\nGet the BER/DER serialization of this OID as bytes.\nGet the byte serialization of this <code>LineEnding</code>.\nBorrow the inner byte slice which contains the least …\nCRT coefficient: …\nCRT coefficient: <code>(inverse of q) mod p</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nExponent: <code>d_i = d mod (r_i - 1)</code>.\nFirst exponent: <code>d mod (p-1)</code>.\nSecond exponent: <code>d mod (q-1)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an OID from a slice of <code>Arc</code> values (i.e. integers).\nParse an OID from from its BER/DER encoding.\nDeserialize PKCS#1 private key from ASN.1 DER-encoded data …\nDeserialize object from ASN.1 DER-encoded <code>RsaPublicKey</code> …\nDeserialize PKCS#1-encoded private key from PEM.\nDeserialize PKCS#1-encoded private key from PEM.\nDeserialize PEM-encoded <code>RsaPublicKey</code>.\nDeserialize PEM-encoded <code>RsaPublicKey</code>.\nHash Algorithm\nHash Algorithm\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the inner byte slice empty?\nIs this a multi-prime RSA key?\nGet the length of this <code>ObjectIdentifier</code> in arcs.\nGet the encoded length of this <code>LineEnding</code>.\nGet the length of this <code>UintRef</code> in bytes.\nMask Generation Function (MGF)\nMask Generation Function (MGF)\n<code>n</code>: RSA modulus.\n<code>n</code>: RSA modulus\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nCreate new RsaPssParams for the provided digest and salt …\nCreate new RsaPssParams for the provided digest and …\nCreate a new <code>UintRef</code> from a byte slice.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nCreate new RsaPssParams for the provided digest and …\nAdditional primes <code>r_3</code>, …, <code>r_u</code>, in order, if this is a …\nThe source (and possibly the value) of the label L\nGet the parent OID of this one (if applicable).\nPrime factor <code>r_i</code> of <code>n</code>, where <code>i</code> &gt;= 3.\n<code>p</code>: first prime factor of <code>n</code>.\n<code>q</code>: Second prime factor of <code>n</code>.\n<code>d</code>: RSA private exponent.\n<code>e</code>: RSA public exponent.\n<code>e</code>: RSA public exponent\nGet the public key that corresponds to this <code>RsaPrivateKey</code>.\nPush an additional arc onto this OID, returning the child …\nLoad PKCS#1 private key from an ASN.1 DER-encoded file on …\nLoad PKCS#1 private key from an ASN.1 DER-encoded file on …\nLoad <code>RsaPublicKey</code> from an ASN.1 DER-encoded file on the …\nLoad <code>RsaPublicKey</code> from an ASN.1 DER-encoded file on the …\nLoad PKCS#1 private key from a PEM-encoded file on the …\nLoad PKCS#1 private key from a PEM-encoded file on the …\nLoad <code>RsaPublicKey</code> from a PEM-encoded file on the local …\nLoad <code>RsaPublicKey</code> from a PEM-encoded file on the local …\nSalt length\nSerialize a <code>SecretDocument</code> containing a PKCS#1-encoded …\nSerialize a <code>Document</code> containing a PKCS#1-encoded public …\nSerialize this private key as PEM-encoded PKCS#1 with the …\nSerialize this private key as PEM-encoded PKCS#1 with the …\nSerialize this public key as PEM-encoded PKCS#1 with the …\nSerialize this public key as PEM-encoded PKCS#1 with the …\nTrailer field (i.e. <code>TrailerField::BC</code>)\nGet the <code>Version</code> for this key.\nWrite ASN.1 DER-encoded PKCS#1 private key to the given …\nWrite ASN.1 DER-encoded PKCS#1 private key to the given …\nWrite ASN.1 DER-encoded public key to the given path.\nWrite ASN.1 DER-encoded public key to the given path.\nWrite ASN.1 DER-encoded PKCS#1 private key to the given …\nWrite ASN.1 DER-encoded PKCS#1 private key to the given …\nWrite ASN.1 DER-encoded public key to the given path.\nWrite ASN.1 DER-encoded public key to the given path.")