searchState.loadedDescShard("cookie_store", 0, "cookie_store\n<code>Cookie</code> expires at the given UTC time, as set from either …\nA cookie conforming more closely to IETF RFC6265\nThe domain of a <code>Cookie</code>\nWhen a given <code>Cookie</code> expires\nThe path of a <code>Cookie</code>\nAn implementation for storing and retrieving <code>Cookie</code>s per …\nCookie received from a request-uri that does not …\nDomain attribute-value was empty; technically undefined …\nThe cookie’s name was empty.\nContains the error value\nContains the error value\nCookie is Expired\nNo Domain attribute in Set-Cookie header\nThe cookie did not contain a name/value pair.\nCookie had attribute HttpOnly but was received from a …\nCookie did not specify domain but was received from …\nDomain attribute was not present in the Set-Cookie header\nContains the success value\nContains the success value\n<code>cookie::Cookie</code> Parse error\nCookie specified a public suffix domain-attribute that …\nRepresentation of an HTTP cookie.\nEnum corresponding to a parsing error.\n<code>Cookie</code> expires at the end of the current <code>Session</code>; this …\nDomain attribute from Set-Cookie header\nTried to use a CookieDomain variant of <code>Empty</code> or <code>NotPresent</code> …\nDecoding the cookie’s name or value resulted in invalid …\nGet a borrowed string representation of the domain. For …\nReturns a description of this error as a string\nCreates a new <code>CookieBuilder</code> instance from the given key …\nClear the contents of the store\nReturns true if the <code>CookieStore</code> contains an <strong>unexpired</strong> …\nReturns true if the <code>CookieStore</code> contains any (even an …\nDetermine the default-path of <code>request_url</code> per IETF RFC6265 …\nReturns the <code>Domain</code> of the cookie if one was specified.\nThe Domain attribute from a Set-Cookie header, or a …\nReturns the <code>Domain</code> of <code>self</code> as a string slice of the raw …\nWraps <code>self</code> in an encoded <code>Display</code>: a cost-free wrapper …\nExpire this cookie\nReturns the <code>Expiration</code> of the cookie if one was specified.\nFor a persistent Cookie (see IETF RFC6265 Section 5.3), …\nIndicates if the <code>Cookie</code> expires as of <code>utc_tm</code>.\nIndicates if the <code>Cookie</code> expires as of <code>utc_tm</code>.\nReturns the expiration date-time of the cookie if one was …\nFormats the cookie <code>self</code> as a <code>Set-Cookie</code> header value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>CookieStore</code> from an iterator of <code>Cookie</code> values. …\nReturns a reference to the <strong>unexpired</strong> <code>Cookie</code> corresponding …\nReturns a reference to the (possibly <strong>expired</strong>) <code>Cookie</code> …\nReturn an <code>Iterator</code> of the cookies for <code>url</code> in the store, …\nReturn an <code>Iterator</code> of the cookie (<code>name</code>, <code>value</code>) pairs for …\nTests if the given <code>url::Url</code> has a request-host identical …\nGet the CookieDomain::HostOnly variant based on <code>request_url</code>…\nReturns whether this cookie was marked <code>HttpOnly</code> or not. …\nInserts <code>cookie</code>, received from <code>request_url</code>, into the store, …\nConverts a <code>cookie::Cookie</code> (from the <code>cookie</code> crate) into a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into a <code>Cookie</code> with a static lifetime with as …\nReturn whether the <code>Cookie</code> is expired <em>now</em>\nIndicates if the <code>Cookie</code> is expired as of <em>now</em>.\nReturns true if this <code>CookiePath</code> was set from a Path …\nShould this <code>Cookie</code> be persisted across sessions?\nTests if the domain-attribute is a public suffix as …\nAn iterator visiting all (including <strong>expired</strong>) cookies in …\nAn iterator visiting all the <strong>unexpired</strong> cookies in the store\nLoad cookies from <code>reader</code>, deserializing with …\nLoad cookies from <code>reader</code>, deserializing with …\nLoad JSON-formatted cookies from <code>reader</code>, skipping any …\nLoad JSON-formatted cookies from <code>reader</code>, loading both …\nMakes <code>self</code> a “permanent” cookie by extending its …\nMake <code>self</code> a “removal” cookie by clearing its value, …\nWhether this <code>Cookie</code> should be included for <code>request_url</code>\nTests if the given <code>url::Url</code> meets the domain-match criteria\nDetermine if <code>request_url</code> path-matches this <code>CookiePath</code> per …\nReturns a collection of references to <strong>unexpired</strong> cookies …\nReturns the specified max-age of the cookie if one was …\nReturns the name of <code>self</code>.\nReturns the name of <code>self</code> as a string slice of the raw …\nReturns the name and value of <code>self</code> as a tuple of …\nCreates a new <code>Cookie</code> with the given name and an empty …\nCreates a new <code>Cookie</code> with the given name and value.\nAttempt to parse <code>path</code> as a <code>CookiePath</code>; if unsuccessful, …\nParses a new <code>cookie_store::Cookie</code> from <code>cookie_str</code>.\nParses a <code>Cookie</code> from the given HTTP cookie header value …\nAttempt to parse <code>path</code> as a <code>CookiePath</code>. If <code>path</code> does not …\nParses a new <code>Cookie</code> from <code>cookie_str</code> and inserts it into …\nParses a <code>Cookie</code> from the given HTTP cookie header value …\nReturns the <code>Path</code> of the cookie if one was specified.\nThe Path attribute from a Set-Cookie header or the …\nReturns the <code>Path</code> of <code>self</code> as a string slice of the raw …\nRemoves a <code>Cookie</code> from the store, returning the <code>Cookie</code> if …\nReturns the <code>SameSite</code> attribute of this cookie if one was …\nSerialize any <strong>unexpired</strong> and <strong>persistent</strong> cookies in the …\nSerialize all (including <strong>expired</strong> and <strong>non-persistent</strong>) …\nSerialize all (including <strong>expired</strong> and <strong>non-persistent</strong>) …\nSerialize any <strong>unexpired</strong> and <strong>persistent</strong> cookies in the …\nReturns whether this cookie was marked <code>Secure</code> or not. …\nSets the <code>domain</code> of <code>self</code> to <code>domain</code>.\nSets the expires field of <code>self</code> to <code>time</code>. If <code>time</code> is <code>None</code>, an\nSets the value of <code>http_only</code> in <code>self</code> to <code>value</code>.  If <code>value</code> is …\nSets the value of <code>max_age</code> in <code>self</code> to <code>value</code>. If <code>value</code> is …\nSets the name of <code>self</code> to <code>name</code>.\nSets the <code>path</code> of <code>self</code> to <code>path</code>.\nSets the value of <code>same_site</code> in <code>self</code> to <code>value</code>. If <code>value</code> is …\nSets the value of <code>secure</code> in <code>self</code> to <code>value</code>. If <code>value</code> is <code>None</code>…\nSets the value of <code>self</code> to <code>value</code>.\nParses the HTTP <code>Cookie</code> header, a series of cookie names …\nParses the HTTP <code>Cookie</code> header, a series of cookie names …\nStore the <code>cookies</code> received from <code>url</code>\nWraps <code>self</code> in a stripped <code>Display</code>]: a cost-free wrapper …\nCreate a new <code>cookie_store::Cookie</code> from a <code>cookie::Cookie</code> …\nUnsets the <code>domain</code> of <code>self</code>.\nUnsets the <code>expires</code> of <code>self</code>.\nUnsets the <code>path</code> of <code>self</code>.\nReturns the value of <code>self</code>.\nReturns the value of <code>self</code> as a string slice of the raw …\nSpecify a <code>publicsuffix::List</code> for the <code>CookieStore</code> to allow …")