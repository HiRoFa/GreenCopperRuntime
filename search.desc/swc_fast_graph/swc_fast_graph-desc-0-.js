searchState.loadedDescShard("swc_fast_graph", 0, "<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure where node …\nA <code>GraphMap</code> with directed edges.\n<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure using an …\nA trait group for <code>GraphMap</code>’s node identifier.\nA reference that is hashed and compared by its pointer …\nAdd an edge connecting <code>a</code> and <code>b</code> to the graph, with …\nAdd node <code>n</code> to the graph.\nReturn an iterator over all edges of the graph with their …\nReturn an iterator over all edges of the graph in …\nReturn the current node and edge capacity of the graph.\nRemove all nodes and edges\nPtr is ordered by pointer value, i.e. an arbitrary but …\nReturn <code>true</code> if the edge connecting <code>a</code> with <code>b</code> is contained …\nReturn <code>true</code> if the node is contained in the graph.\nReturn the number of edges in the graph.\nReturn a reference to the edge weight connecting <code>a</code> with <code>b</code>, …\nReturn a mutable reference to the edge weight connecting <code>a</code> …\nReturn an iterator of target nodes with an edge starting …\nPtr compares by pointer equality, i.e if they point to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>GraphMap</code> from an iterable of edges.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>Graph</code> that corresponds to this <code>GraphMap</code>.\nWhether the graph has directed edges.\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <code>GraphMap</code>\nReturn the number of nodes in the graph.\nReturn an iterator over the nodes of the graph.\nRemove edge from <code>a</code> to <code>b</code> from the graph and return the edge …\nReturn <code>true</code> if node <code>n</code> was removed.\nCreate a new <code>GraphMap</code> with estimated capacity.")