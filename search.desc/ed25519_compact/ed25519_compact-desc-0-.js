searchState.loadedDescShard("ed25519_compact", 0, "A compact Ed25519 and X25519 implementation for Rust.\nNumber of raw bytes in a seed.\nNumber of raw bytes in a public key.\nNumber of bytes in a secret key.\nNumber of bytes in a key pair.\nNumber of raw bytes in a signature.\nNumber of raw bytes for a noise component.\nThe blind doesn’t have the expected length.\nThe noise doesn’t have the expected length.\nThe public key is invalid.\nThe secret key is invalid.\nThe seed doesn’t have the expected length.\nThe signature is invalid.\nA key pair.\nNoise, for non-deterministic signatures.\nNon-canonical encoding\nParse error\nA public key.\nA secret key.\nA seed, which a key pair can be derived from.\nAn Ed25519 signature.\nThe signature doesn’t verify.\nThe state of a streaming signature operation.\nThe state of a streaming verification operation.\nA weak public key was used.\nAppends data to the message being verified.\nAppends data to the message being signed.\nClamp a scalar.\nGenerates a random seed.\nGenerates random noise.\nReturns a seed as raw bytes.\nReturns a public key as bytes.\nReturns a secret key as bytes.\nReturns a key pair as bytes.\nReturns a signture as bytes.\nReturns the noise as bytes.\nReturns a seed as mutable raw bytes.\nReturns a public key as mutable bytes.\nReturns a secret key as mutable bytes.\nReturns a key pair as mutable bytes.\nReturns a signature as mutable bytes.\nReturns the noise as mutable bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport a public key from an OpenSSL-compatible DER file.\nImport a secret key from an OpenSSL-compatible DER file.\nImport a key pair from an OpenSSL-compatible DER file.\nImport a public key from an OpenSSL-compatible PEM file.\nImport a secret key from an OpenSSL-compatible PEM file.\nImport a key pair from an OpenSSL-compatible PEM file.\nGenerates a new key pair using a secret seed.\nCreates a seed from a slice.\nCreates a public key from a slice.\nCreates a secret key from a slice.\nCreates a key pair from a slice.\nCreates a signature key from a slice.\nCreates noise from a slice.\nGenerates a random seed.\nGenerates a new key pair.\nGenerates random noise.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a seed from raw bytes.\nCreates a public key from raw bytes.\nCreates a secret key from raw bytes.\nCreates a signature from raw bytes.\nCreates a new noise component from raw bytes.\nPublic key part of the key pair.\nReturns the public counterpart of a secret key.\nReturns the seed of a secret key.\nComputes a signature for the message <code>message</code> using the …\nComputes the signature and return it.\nSign a multi-part message (streaming API). It is critical …\nSecret key part of the key pair.\nSplit a serialized representation of a key pair into a …\nExport a public key as an OpenSSL-compatible DER file.\nExport a secret key as an OpenSSL-compatible DER file.\nExport a public key as an OpenSSL-compatible PEM file.\nExport a secret key as an OpenSSL-compatible PEM file.\nExport a key pair as an OpenSSL-compatible PEM file.\nCheck that the public key is valid for the secret key.\nReturns <code>Ok(())</code> if the given public key is the public …\nVerifies that the signature <code>signature</code> is valid for the …\nVerifies the signature and return it.\nVerify the signature of a multi-part message (streaming).\nTentatively overwrite the content of the seed with zeros.\nNumber of raw bytes in a public key.\nNumber of bytes in a secret key.\nNon-uniform output of a scalar multiplication. This …\nA key pair.\nA public key.\nA secret key.\nThe Curve25519 base point\nPerform the X25519 clamping magic\nMultiply a point by the cofactor, returning an error if …\nReturns the output of the scalar multiplication as bytes. …\nReturns a public key as bytes.\nReturns a secret key as bytes.\nReturns the output of the scalar multiplication as bytes. …\nReturns a public key as mutable bytes.\nReturns a secret key as mutable bytes.\nMultiply the point represented by the public key by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an Ed25519 public key to a X25519 public key.\nConvert an Ed25519 secret key to a X25519 secret key.\nConvert an Ed25519 key pair to a X25519 key pair.\nCreates a public key from a slice.\nCreates a secret key from a slice.\nGenerates a new key pair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a public key from raw bytes.\nCreates a secret key from raw bytes.\nPublic key part of the key pair.\nRecover the public key\nSecret key part of the key pair.\nMultiply the point represented by the public key by the …\nCheck that the public key is valid for the secret key.\nReturns <code>Ok(())</code> if the given public key is the public …")