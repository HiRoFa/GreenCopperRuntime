searchState.loadedDescShard("primeorder", 0, "RustCrypto: Prime Order Elliptic Curve Formulas\nPoint on a Weierstrass curve in affine coordinates.\nHow many bits of information can be reliably stored in the ‚Ä¶\nGenerator of the <code>t-order</code> multiplicative subgroup.\nDouble a point (i.e. add it to itself)\nCoefficient <code>a</code> in the curve equation.\nCoefficient <code>b</code> in the curve equation.\nThis trait represents an element of a field.\nByte representation of a base/scalar field element of a ‚Ä¶\nBase field element type.\nGenerator point‚Äôs affine coordinates: (x, y).\nBase point of the curve.\nBase point of the curve.\nAdditive identity of the group a.k.a. the point at ‚Ä¶\nAdditive identity of the group a.k.a. the point at ‚Ä¶\nModulus of the field written as a string for debugging ‚Ä¶\nA fixed multiplicative generator of <code>modulus - 1</code> order. ‚Ä¶\nHow many bits are needed to represent an element of this ‚Ä¶\nThe one element of the field, the multiplicative identity.\nPoint arithmetic implementation, might be optimized for ‚Ä¶\nMarker trait for elliptic curves with prime order.\nParameters for elliptic curves of prime order which can be ‚Ä¶\nThis represents an element of a non-binary prime field.\nPoint on a Weierstrass curve in projective coordinates.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this ‚Ä¶\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> ‚Ä¶\nInverse of $2$ in the field.\nThe zero element of the field, the additive identity.\nReturns <code>self + other</code>.\nCubes this element.\nDoubles this element.\nDouble this point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNOTE: not constant-time with respect to identity point\nAttempts to parse the given <code>EncodedPoint</code> as an SEC1-encoded\nAttempts to convert a byte representation of a field ‚Ä¶\nAttempts to convert a byte representation of a field ‚Ä¶\nInterpret a string of numbers as a (congruent) prime field ‚Ä¶\nObtains a field element congruent to the integer <code>v</code>.\nImplement Bernstein-Yang field element inversion.\nImplement field element identity tests.\nImplement field element inversion tests.\nEmit impls for a <code>core::ops</code> trait for all combinations of ‚Ä¶\nImplement field element square root tests.\nImplements a field element type whose internal ‚Ä¶\nAdd arithmetic impls to the given field element.\nImplement tests for the <code>PrimeField</code> trait.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, ‚Ä¶\nReturns true iff this element is even.\nIs this point the point at infinity?\nReturns true iff this element is odd.\nReturns true iff this element is zero.\nReturns true iff this element is zero.\nReturns <code>-self</code>.\nPoint arithmetic implementation optimised for different ‚Ä¶\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian ‚Ä¶\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian ‚Ä¶\nReturns an element chosen uniformly at random using a ‚Ä¶\nReturns the square root of the field element, if it is ‚Ä¶\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nReturns <code>self - other</code>.\nReturns the affine representation of this point, or <code>None</code> ‚Ä¶\nSerialize this value as a  SEC1 compact <code>EncodedPoint</code>\nConverts an element of the prime field into the standard ‚Ä¶\nThe ùíÇ-coefficient of the short Weierstrass equation ‚Ä¶\nThe ùíÇ-coefficient of the short Weierstrass equation is ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")