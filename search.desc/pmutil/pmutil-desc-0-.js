searchState.loadedDescShard("pmutil", 0, "Utils for implementing proc-macro. Works on stable.\nExtension trait for syn::Ident.\nExtension trait for Span and syn::Span.\nCreates <code>Token</code> from <code>self</code>.\nCreates <code>Token</code> from <code>self</code>.\nUsage: <code>Quote::new(body.first_last())</code>\nCreates a new ident with same span by applying <code>map</code> to <code>self</code>.\nPrelude for convenience.\nShortcut for …\nSpan support for quasi-quotting.\nide-friendly quasi quotting.\nSpan-aware quasi quotting built on top of <code>quote</code> crate.\nUtils for tokens from synom::tokens.\nCreates a comment from <code>s</code>.\nShortcut for …\nide-friendly quasi quotting.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUsed while quasi quotting.\nLocation of <code>smart_quote!</code> macro invocation.\nBuffer for quasi quotting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShorthand for\nShorthand for\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShorthand for\nParse tokens as <code>Node</code>. Panics if parsing failed.\nRespan and append <code>TokenStream::Group</code>\nParse <code>token</code> and append it to <code>self</code>.\nRespan symbol and append it to <code>self</code>.\nAppends node into <code>self</code> <strong>without respanning</strong>.\nAppend <code>tt</code> to <code>self</code>.\nSee SpanExt#as_token for usage. Create tokens from Span.")