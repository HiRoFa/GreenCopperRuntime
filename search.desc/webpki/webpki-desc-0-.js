searchState.loadedDescShard("webpki", 0, "webpki: Web PKI X.509 Certificate Validation.\nAn error indicating that an <code>IpAddrRef</code> could not built …\nThe encoding of some ASN.1 DER-encoded item is invalid.\nThe encoding of an ASN.1 DER-encoded time is invalid.\nBorrowed representation of a RFC 5280 profile Certificate …\nBorrowed representation of a RFC 5280 profile Certificate …\nThe <code>Cert</code> is an issuer certificate, and issued the …\nA CA certificate is being used as an end-entity …\nA parsed X509 certificate.\nThe certificate is expired; i.e. the time it is being …\nThe certificate is not valid for the name it is being …\nThe certificate is not valid yet; i.e. the time it is …\nOperations over a RFC 5280 profile Certificate Revocation …\nThe certificate, or one of its issuers, has been revoked.\nRequires the <code>alloc</code> feature. A DNS Name suitable for use in …\nA valid DNS name\nA reference to a DNS Name suitable for use in the TLS …\nECDSA signatures using the P-256 curve and SHA-256.\nECDSA signatures using the P-256 curve and SHA-384. …\nECDSA signatures using the P-384 curve and SHA-256. …\nECDSA signatures using the P-384 curve and SHA-384.\nED25519 signatures according to RFC 8410\nThe <code>Cert</code> is a leaf end-entity certificate.\nAn end-entity certificate.\nAn enumeration indicating whether a <code>Cert</code> is a leaf …\nAn end-entity certificate is being used as a CA …\nAn error that occurs during certificate validation or name …\nAn X.509 extension is invalid.\nThe certificate validity period (notBefore, notAfter) is …\nA CRL number extension was invalid:\nThe CRL signature is invalid for the issuer’s public key.\nAn error indicating that a <code>DnsNameRef</code> could not built …\nA iPAddress name constraint was invalid:\nA serial number was invalid:\nThe signature is invalid for the given public key.\nAn error indicating that a <code>SubjectNameRef</code> could not built …\nEither a IPv4 or IPv6 address, plus its owned string …\nEither a IPv4 or IPv6 address, plus its borrowed string …\nA valid IP address\nA CRL was signed by an issuer that has a KeyUsage …\nThe expected key usage of a certificate.\nA presented or reference DNS identifier was malformed, …\nThe certificate extensions are malformed.\nA name constraint was malformed, potentially containing …\nThe maximum number of name constraint comparisons has been …\nThe maximum number of internal path building calls has …\nThe path search was terminated because it became too deep.\nThe maximum number of signature checks has been reached. …\nThe certificate violates one or more name constraints.\nOwned representation of a RFC 5280 profile Certificate …\nOwned representation of a RFC 5280 profile Certificate …\nThe certificate violates one or more path length …\nRSA PKCS#1 1.5 signatures using SHA-256 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-384 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-512 for keys of …\nRSA PKCS#1 1.5 signatures using SHA-384 for keys of …\nRSA PSS signatures using SHA-256 for keys of 2048-8192 …\nRSA PSS signatures using SHA-384 for keys of 2048-8192 …\nRSA PSS signatures using SHA-512 for keys of 2048-8192 …\nRemoveFromCrl only appears in delta CRLs that are …\nThe certificate is not valid for the Extended Key Usage …\nIdentifies the reason a certificate was revoked. See RFC …\nA signature algorithm.\nThe algorithm in the TBSCertificate “signature” field …\nA DNS name or IP address, which borrows its text …\nThe time type.\nTrust anchors which may be used for authenticating clients.\nTrust anchors which may be used for authenticating servers.\nA trust anchor (a.k.a. root CA).\nA valid issuer for the certificate could not be found.\nUnspecified should not be used, and is instead assumed by …\nThe certificate is not a v3 X.509 certificate.\nThe certificate contains an unsupported critical extension.\nThe signature algorithm for a signature over a CRL is not …\nThe CRL signature’s algorithm does not match the …\nThe CRL is not a v2 X.509 CRL.\nThe CRL is an unsupported “delta” CRL.\nThe CRL contains unsupported “indirect” entries.\nThe revocation reason is not in the set of supported …\nThe signature algorithm for a signature is not in the set …\nThe signature’s algorithm does not match the algorithm …\nAn IPv4 address and its owned string representation\nAn IPv4 address and its borrowed string representation\nAn IPv6 address and its owned string representation\nAn IPv6 address and its borrowed string representation\nReturns a <code>DnsNameRef</code> that refers to this <code>DnsName</code>.\nConvert the owned representation of this revoked cert to a …\nConstruct a new <code>KeyUsage</code> as appropriate for client …\nReturns a list of the DNS names provided in the subject …\nReturns an indication of whether the certificate is an …\nTry to find a revoked certificate in the CRL by DER …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to parse the given bytes as a RFC 5280 profile …\nCreate a <code>webpki::Time</code> from a unix timestamp.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides the date on which it is known or suspected that …\nProvides the date on which it is known or suspected that …\nReturn the DER encoded issuer of the CRL.\nRaw DER encoded certificate issuer.\nThe value of a DER-encoded NameConstraints, containing name\nIdentifies the reason for the certificate revocation. When …\nIdentifies the reason for the certificate revocation. When …\nConstruct a new <code>KeyUsage</code> requiring a certificate to …\nThe date at which the CA processed the revocation.\nThe date at which the CA processed the revocation.\nRaw DER encoded certificate serial number.\nSerial number of the revoked certificate.\nSerial number of the revoked certificate.\nConstruct a new <code>KeyUsage</code> as appropriate for server …\nThe value of the <code>subjectPublicKeyInfo</code> field of the trust …\nRaw DER encoded certificate subject.\nThe value of the <code>subject</code> field of the trust anchor.\nConstructs a <code>DnsName</code> from this <code>DnsNameRef</code>\nConstructs an <code>IpAddr</code> from this <code>IpAddrRef</code>\nConvert the CRL to an <code>OwnedCertRevocationList</code>. This may …\nConstruct an owned representation of the revoked …\nParse the ASN.1 DER-encoded X.509 encoding of the …\nCreate a <code>webpki::Time</code> from a <code>std::time::SystemTime</code>.\nConstructs a <code>DnsNameRef</code> from the given input if the input …\nAttempts to decode an encodingless string as either an …\nConstructs an <code>IpAddrRef</code> from the given input if the input …\nConstructs a <code>DnsNameRef</code> from the given input if the input …\nConstructs a <code>SubjectNameRef</code> from the given input if the …\nConstructs an <code>IpAddrRef</code> from the given input if the input …\nInterprets the given DER-encoded certificate as a …\nVerifies that the end-entity certificate is valid for use …\nVerifies that the certificate is valid for the given …\nVerifies that the end-entity certificate is valid for use …\nVerifies that the end-entity certificate is valid for use …\nVerify the CRL signature using the issuer’s subject …\nVerifies the signature <code>signature</code> of message <code>msg</code> using the …")