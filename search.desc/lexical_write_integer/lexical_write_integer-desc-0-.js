searchState.loadedDescShard("lexical_write_integer", 0, "Fast lexical integer-to-string conversion routines.\nMaximum number of bytes required to serialize any number …\nMaximum number of bytes required to serialize a number to …\nMaximum number of bytes required to serialize a number to …\nThe size, in bytes, of formatted values.\nBuild number format from specifications.\nImmutable options to customize writing integers.\nCustom formatting options for writing a number.\nBuilder for <code>Options</code>.\nTrait for numerical types that can be serialized to bytes.\nTrait for numerical types that can be serialized to bytes …\nShared trait for all writer options.\nCreate number format for standard, binary number.\nGet an upper bound on the buffer size.\nCreate 128-bit, packed number format struct from builder …\nCreate number format for standard, decimal number.\nSet the radix for the exponent.\nSet the radix for exponent digits.\nPublic API for the number format packed struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate number format from radix.\nGet the optional character for the base prefix.\nGet the optional character for the base suffix.\nGet if base prefixes are case-sensitive.\nGet if base suffixes are case-sensitive.\nGet if exponent characters are case-sensitive.\nGet if special (non-finite) values are case-sensitive.\nGet the digit separator for the number format.\nGet the radix for the exponent.\nGet if multiple consecutive exponent digit separators are …\nGet if digit separators are allowed between exponent …\nGet if a digit separator is allowed before any exponent …\nGet the radix for exponent digits.\nGet if a digit separator is allowed after any exponent …\nGet if multiple consecutive fraction digit separators are …\nGet if digit separators are allowed between fraction …\nGet if a digit separator is allowed before any fraction …\nGet if a digit separator is allowed after any fraction …\nGet if multiple consecutive integer digit separators are …\nGet if digit separators are allowed between integer digits.\nGet if a digit separator is allowed before any integer …\nGet if a digit separator is allowed after any integer …\nGet the radix for mantissa digits.\nGet if exponent notation is not allowed.\nGet if an exponent without fraction is not allowed.\nGet if leading zeros before a float are not allowed.\nGet if leading zeros before an integer are not allowed.\nGet if a positive sign before the exponent is not allowed.\nGet if a positive sign before the mantissa is not allowed.\nGet if special (non-finite) values are not allowed.\nGet if digits are required after the exponent character.\nGet if exponent notation is required.\nGet if a sign symbol before the exponent is required.\nGet if digits are required after the decimal point.\nGet if digits are required before the decimal point.\nGet if at least 1 significant digit is required.\nGet if a sign symbol before the mantissa is required.\nGet if any digit separators are allowed in special …\nCreate number format for standard, hexadecimal number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if the options are valid.\nSet the radix for mantissa digits.\nCreate new NumberFormatBuilder with default arguments.\nCreate number format for standard, octal number.\nConfiguration options for writing integers.\nAlias for mantissa radix.\nRe-create builder from format.\nSerializer for a number-to-string conversion.\nSerializer for a number-to-string conversion.\nSerializer for a number-to-string conversion.\nSerializer for a number-to-string conversion.\nMask to extract the base prefix character.\nShift to convert to and from a base prefix as a <code>u8</code>.\nMask to extract the base suffix character.\nShift to convert to and from a base suffix as a <code>u8</code>.\nBase prefixes are case-sensitive.\nBase suffixes are case-sensitive.\nExponent characters are case-sensitive.\nSpecial (non-finite) values are case-sensitive.\nMultiple consecutive digit separators are allowed.\nMask to extract the digit separator character.\nShift to convert to and from a digit separator as a <code>u8</code>.\nMask to extract the exponent base: the base the exponent …\nShift to convert to and from an exponent base as a <code>u32</code>.\nMultiple consecutive exponent digit separators are allowed.\nDigit separators are allowed between exponent digits.\nA digit separator is allowed before any exponent digits.\nMask to extract the exponent radix: the radix for the …\nShift to convert to and from an exponent radix as a <code>u32</code>.\nA digit separator is allowed after any exponent digits.\nMultiple consecutive fraction digit separators are allowed.\nDigit separators are allowed between fraction digits.\nA digit separator is allowed before any fraction digits.\nA digit separator is allowed after any fraction digits.\nMultiple consecutive integer digit separators are allowed.\nDigit separators are allowed between integer digits.\nA digit separator is allowed before any integer digits.\nA digit separator is allowed after any integer digits.\nDigit separators are allowed between digits.\nA digit separator is allowed before any digits.\nMask to extract the mantissa radix: the radix for the …\nShift to convert to and from a mantissa radix as a <code>u32</code>.\nExponent notation is not allowed.\nExponent without a fraction component is not allowed.\nLeading zeros before a float value are not allowed.\nLeading zeros before an integer value are not allowed.\nPositive sign before the exponent is not allowed.\nPositive sign before the mantissa is not allowed.\nSpecial (non-finite) values are not allowed.\nNo value.\nBuild number format from specifications.\nType with the exact same size as a <code>u8</code>.\nAlias for MANTISSA_RADIX.\nAlias for MANTISSA_RADIX_SHIFT.\nAt least 1 digit in the number is required.\nDigits are required after the exponent character. This …\nExponent notation is required.\nPositive sign before the exponent is required.\nDigits are required after the decimal point. This check …\nDigits are required before the decimal point.\nMantissa digits are required (either before or after the …\nPositive sign before the mantissa is required.\nAny digit separators are allowed in special (non-finite) …\nStandard number format. This is identical to the Rust …\nSome value of type <code>T</code>.\nA digit separator is allowed after any digits.\nExtract the base prefix character from the format packed …\nExtract the base suffix character from the format packed …\nExtract the digit separator from the format packed struct.\nExtract the exponent base from the format packed struct. …\nExtract the exponent radix from the format packed struct. …\nGet the error type from the format packed struct.\nDetermine if the format packed struct is valid.\nDetermine if the base prefix character is valid.\nDetermine if the base suffix character is valid.\nDetermine if the digit separator is valid. Digit …\nDetermine if the provided exponent flags are valid.\nDetermine if all of the “punctuation” characters for …\nDetermine if all of the “punctuation” characters are …\nDetermine if the radix is valid.\nExtract the mantissa radix from the format packed struct.\nExtract a generic radix from the format and bitflags.\nImmutable options to customize writing integers.\nBuilder for <code>Options</code>.\nStandard number format.\nBuild the Options struct.\nBuild the Options struct with bounds validation.\nGet OptionsBuilder as a static function.\nCheck if the builder state is valid.\nCheck if the options state is valid.\nCreate new options builder with default options.\nCreate options with default values.\nCreate OptionsBuilder using existing values.")