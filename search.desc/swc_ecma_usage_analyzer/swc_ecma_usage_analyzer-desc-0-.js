searchState.loadedDescShard("swc_ecma_usage_analyzer", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTODO(kdy1): This field is used for sequential inliner. It …\nThis assumes there are no two variable with same name and …\nTODO: Track assignments to variables via <code>arguments</code>. TODO: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> for arguments of swc_ecma_ast::Expr::Call or …\nAre we handling argument of an update expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>false</code> for <code>array</code> in `array.length.\n<code>true</code> for <code>foo.bar</code> and <code>false</code> for <code>foo</code> in <code>foo.bar++</code>\nSee crate::marks::Marks\nSee <code>declared_as_fn_param</code> of [crate::analyzer::VarUsageInfo]…\n<code>/** @const */</code>.\nThis is applied to swc_ecma_ast::BlockStmt which is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck for <code>/*#__NOINLINE__*/</code>\nMark applied to non-top level variables which is injected …\nCheck for <code>/*#__PURE__*/</code>\nTreat this function as a top level module.\nIndicates that a sequence expression is generated by the …")